plotOutput(outputId = "hist"),
verbatimTextOutput("stats")
)
server = function(input, output){
#variables defined in the ui function as output are elements of the lists 'output' and 'input'
#In order to be reactive with values that change, use the reactive() function as a go-between
# Will need to call this as a function data()
data = reactive({rnorm(input$num)})
#Alternatively, if some action (like clicking a button) changes the state of the data
#Can use a reactiveValues object to store the data in a list.
# reactive values object do not store their data as functions
rv = reactiveValues(data=rnorm(100))
#
observeEvent(input$norm, { rv$data = rnorm(input$num)})
observeEvent(input$unif, { rv$data = runif(input$num)})
#One of the render functions is necessary for converting output to HTML
#These have similar names to the output functions
eventReactive(input$updateTitle,
{output$hist = renderPlot({
hist(rv$data,
main = input$plot.title #Isolates input from reactivity.
)  #R code that builds a plot
}) #Braces allow for R code to be passed to renderPlot
})
output$stats = renderPrint({
summary(data())
})
}
shinyApp(ui=ui, server = server)
library(shiny)
ui = fluidPage(
# *Input() functions,
# inputId stores the value as a variable
# label is the text associated with the input button/display
sliderInput(inputId = 'num',label="Choose a number",value = 25, min=1,max=100),
actionButton("norm","Normal"),
actionButton("unif","Uniform"),
textInput("plot.title","Write a title",value="Histogram of Random Normal Values"),
actionButton("updateTitle","Update Title"),
# *Output() functions define space in the html page, but need to be connected in server function
plotOutput(outputId = "hist"),
verbatimTextOutput("stats")
)
server = function(input, output){
#variables defined in the ui function as output are elements of the lists 'output' and 'input'
#In order to be reactive with values that change, use the reactive() function as a go-between
# Will need to call this as a function data()
data = reactive({rnorm(input$num)})
#Alternatively, if some action (like clicking a button) changes the state of the data
#Can use a reactiveValues object to store the data in a list.
# reactive values object do not store their data as functions
rv = reactiveValues(data=rnorm(100))
#
observeEvent(input$norm, { rv$data = rnorm(input$num)})
observeEvent(input$unif, { rv$data = runif(input$num)})
#One of the render functions is necessary for converting output to HTML
#These have similar names to the output functions
eventReactive(input$updateTitle, main = {input$plot.title})
output$hist = renderPlot({
hist (rv$data,
main = main #Isolates input from reactivity.
)  #R code that builds a plot
}) #Braces allow for R code to be passed to renderPlot
output$stats = renderPrint({
summary(data())
})
}
shinyApp(ui=ui, server = server)
library(shiny)
ui = fluidPage(
# *Input() functions,
# inputId stores the value as a variable
# label is the text associated with the input button/display
sliderInput(inputId = 'num',label="Choose a number",value = 25, min=1,max=100),
actionButton("norm","Normal"),
actionButton("unif","Uniform"),
textInput("plot.title","Write a title",value="Histogram of Random Normal Values"),
actionButton("updateTitle","Update Title"),
# *Output() functions define space in the html page, but need to be connected in server function
plotOutput(outputId = "hist"),
verbatimTextOutput("stats")
)
server = function(input, output){
#variables defined in the ui function as output are elements of the lists 'output' and 'input'
#In order to be reactive with values that change, use the reactive() function as a go-between
# Will need to call this as a function data()
data = reactive({rnorm(input$num)})
#Alternatively, if some action (like clicking a button) changes the state of the data
#Can use a reactiveValues object to store the data in a list.
# reactive values object do not store their data as functions
rv = reactiveValues(data=rnorm(100))
#
observeEvent(input$norm, { rv$data = rnorm(input$num)})
observeEvent(input$unif, { rv$data = runif(input$num)})
#One of the render functions is necessary for converting output to HTML
#These have similar names to the output functions
eventReactive(input$updateTitle, {main = input$plot.title})
output$hist = renderPlot({
hist (rv$data,
main = main #Isolates input from reactivity.
)  #R code that builds a plot
}) #Braces allow for R code to be passed to renderPlot
output$stats = renderPrint({
summary(data())
})
}
shinyApp(ui=ui, server = server)
library(shiny)
ui = fluidPage(
# *Input() functions,
# inputId stores the value as a variable
# label is the text associated with the input button/display
sliderInput(inputId = 'num',label="Choose a number",value = 25, min=1,max=100),
actionButton("norm","Normal"),
actionButton("unif","Uniform"),
textInput("plot.title","Write a title",value="Histogram of Random Normal Values"),
actionButton("updateTitle","Update Title"),
# *Output() functions define space in the html page, but need to be connected in server function
plotOutput(outputId = "hist"),
verbatimTextOutput("stats")
)
server = function(input, output){
#variables defined in the ui function as output are elements of the lists 'output' and 'input'
#In order to be reactive with values that change, use the reactive() function as a go-between
# Will need to call this as a function data()
data = reactive({rnorm(input$num)})
#Alternatively, if some action (like clicking a button) changes the state of the data
#Can use a reactiveValues object to store the data in a list.
# reactive values object do not store their data as functions
rv = reactiveValues(data=rnorm(100))
#
observeEvent(input$norm, { rv$data = rnorm(input$num)})
observeEvent(input$unif, { rv$data = runif(input$num)})
#One of the render functions is necessary for converting output to HTML
#These have similar names to the output functions
#eventReactive(input$updateTitle, {main = input$plot.title})
output$hist = renderPlot({
hist (rv$data,
main = input$plot.title#main #Isolates input from reactivity.
)  #R code that builds a plot
}) #Braces allow for R code to be passed to renderPlot
output$stats = renderPrint({
summary(data())
})
}
shinyApp(ui=ui, server = server)
library(shiny)
ui = fluidPage(
# *Input() functions,
# inputId stores the value as a variable
# label is the text associated with the input button/display
sliderInput(inputId = 'num',label="Choose a number",value = 25, min=1,max=100),
actionButton("norm","Normal"),
actionButton("unif","Uniform"),
textInput("plot.title","Write a title",value="Histogram of Random Normal Values"),
#actionButton("updateTitle","Update Title"),
# *Output() functions define space in the html page, but need to be connected in server function
plotOutput(outputId = "hist"),
verbatimTextOutput("stats")
)
server = function(input, output){
#variables defined in the ui function as output are elements of the lists 'output' and 'input'
#In order to be reactive with values that change, use the reactive() function as a go-between
# Will need to call this as a function data()
data = reactive({rnorm(input$num)})
#Alternatively, if some action (like clicking a button) changes the state of the data
#Can use a reactiveValues object to store the data in a list.
# reactive values object do not store their data as functions
rv = reactiveValues(data=rnorm(100))
#
observeEvent(input$norm, { rv$data = rnorm(input$num)})
observeEvent(input$unif, { rv$data = runif(input$num)})
#One of the render functions is necessary for converting output to HTML
#These have similar names to the output functions
output$hist = renderPlot({
hist (rv$data,
main = input$plot.title
)  #R code that builds a plot
}) #Braces allow for R code to be passed to renderPlot
output$stats = renderPrint({
summary(data())
})
}
shinyApp(ui=ui, server = server)
library(shiny)
ui = fluidPage(
# *Input() functions,
# inputId stores the value as a variable
# label is the text associated with the input button/display
sliderInput(inputId = 'num',label="Choose a number",value = 25, min=1,max=100),
actionButton("norm","Normal"),
actionButton("unif","Uniform"),
textInput("plot.title","Write a title",value="Histogram of Random Normal Values"),
#actionButton("updateTitle","Update Title"),
# *Output() functions define space in the html page, but need to be connected in server function
plotOutput(outputId = "hist"),
verbatimTextOutput("stats")
)
server = function(input, output){
#variables defined in the ui function as output are elements of the lists 'output' and 'input'
#In order to be reactive with values that change, use the reactive() function as a go-between
# Will need to call this as a function data()
data = reactive({rnorm(input$num)})
#Alternatively, if some action (like clicking a button) changes the state of the data
#Can use a reactiveValues object to store the data in a list.
# reactive values object do not store their data as functions
rv = reactiveValues(data=rnorm(100))
#
observeEvent(input$norm, { rv$data = rnorm(input$num); rv$plot.title = "Histogram of Random Normal Values"})
observeEvent(input$unif, { rv$data = runif(input$num); rv$plot.title = "Histogram of Random Uniform Values"})
#One of the render functions is necessary for converting output to HTML
#These have similar names to the output functions
output$hist = renderPlot({
hist (rv$data,
main = input$plot.title
)  #R code that builds a plot
}) #Braces allow for R code to be passed to renderPlot
output$stats = renderPrint({
summary(data())
})
}
shinyApp(ui=ui, server = server)
library(shiny)
ui = fluidPage(
# *Input() functions,
# inputId stores the value as a variable
# label is the text associated with the input button/display
sliderInput(inputId = 'num',label="Choose a number",value = 25, min=1,max=100),
actionButton("norm","Normal"),
actionButton("unif","Uniform"),
#textInput("plot.title","Write a title",value="Histogram of Random Normal Values"),
#actionButton("updateTitle","Update Title"),
# *Output() functions define space in the html page, but need to be connected in server function
plotOutput(outputId = "hist"),
verbatimTextOutput("stats")
)
server = function(input, output){
#variables defined in the ui function as output are elements of the lists 'output' and 'input'
#In order to be reactive with values that change, use the reactive() function as a go-between
# Will need to call this as a function data()
data = reactive({rnorm(input$num)})
#Alternatively, if some action (like clicking a button) changes the state of the data
#Can use a reactiveValues object to store the data in a list.
# reactive values object do not store their data as functions
rv = reactiveValues(data=rnorm(100))
#
observeEvent(input$norm, { rv$data = rnorm(input$num); rv$plot.title = "Histogram of Random Normal Values"})
observeEvent(input$unif, { rv$data = runif(input$num); rv$plot.title = "Histogram of Random Uniform Values"})
#One of the render functions is necessary for converting output to HTML
#These have similar names to the output functions
output$hist = renderPlot({
hist (rv$data,
main = rv$plot.title
)  #R code that builds a plot
}) #Braces allow for R code to be passed to renderPlot
output$stats = renderPrint({
summary(data())
})
}
shinyApp(ui=ui, server = server)
library(shiny)
ui = fluidPage(
# *Input() functions,
# inputId stores the value as a variable
# label is the text associated with the input button/display
sliderInput(inputId = 'num',label="Choose a number",value = 25, min=1,max=100),
actionButton("norm","Normal"),
actionButton("unif","Uniform"),
#textInput("plot.title","Write a title",value="Histogram of Random Normal Values"),
#actionButton("updateTitle","Update Title"),
# *Output() functions define space in the html page, but need to be connected in server function
plotOutput(outputId = "hist"),
verbatimTextOutput("stats")
)
server = function(input, output){
#variables defined in the ui function as output are elements of the lists 'output' and 'input'
#In order to be reactive with values that change, use the reactive() function as a go-between
# Will need to call this as a function data()
data = reactive({rnorm(input$num)})
#Alternatively, if some action (like clicking a button) changes the state of the data
#Can use a reactiveValues object to store the data in a list.
# reactive values object do not store their data as functions
rv = reactiveValues(data=rnorm(100),plot.title = "Histogram of Random Normal Values")
#
observeEvent(input$norm, { rv$data = rnorm(input$num); rv$plot.title = "Histogram of Random Normal Values"})
observeEvent(input$unif, { rv$data = runif(input$num); rv$plot.title = "Histogram of Random Uniform Values"})
#One of the render functions is necessary for converting output to HTML
#These have similar names to the output functions
output$hist = renderPlot({
hist (rv$data,
main = rv$plot.title
)  #R code that builds a plot
}) #Braces allow for R code to be passed to renderPlot
output$stats = renderPrint({
summary(data())
})
}
shinyApp(ui=ui, server = server)
shiny::runGitHub('InteractiveDiatomPhylogeny', 'teofiln')
install.packages('phangorn')
shiny::runGitHub('InteractiveDiatomPhylogeny', 'teofiln')
runGitHub('InteractiveDiatomPhylogeny','')
runGitHub('InteractiveDiatomPhylogeny','teofiln')
?runGitHub
install.packages('unzip')
install.packages('rCurl')
install.packages('RCurl')
install.packages("RCurl")
runGitHub('InteractiveDiatomPhylogeny','teofiln')
library(shiny)
runGitHub('InteractiveDiatomPhylogeny','teofiln')
sessionInfo()
runUrl('https://github.com/teofiln/InteractiveDiatomPhylogeny/archive/master.tar.gz')
runUrl('http://github.com/teofiln/InteractiveDiatomPhylogeny/archive/master.tar.gz')
runGist('3239667')
install.packages('shiny')
shiny()
library(shiny)
runGist('3239667')
sessionInfo()
devtools::install_github("rstudio/shiny")
library(shiny)
devtools::install_github("rstudio/shiny")
library(shiny)
install.packages('shiny')
library(shiny)
devtools::uninstall_github("rstudio/shiny")
remove.packages('shiny')
install.packages('shiny')
remove.packages('shiny')
install.packages('shiny')
library(shiny)
library(devtools)
dev_mode(TRUE)
remove.packages('shiny')
remove.packages('rstudio/shiny')
remove.packages('shiny')
dev_mode(FALSE)
library(shiny)
remove.packages('shiny')
remove.packages('shiny')
install.packages('shiny')
library(shiny)
library("shiny", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
detach("package:shiny", unload=TRUE)
library("shiny", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
remove.packages("shiny")
install.packages(c("boot", "class", "cluster", "codetools", "foreign", "gdata", "KernSmooth", "lattice", "MASS", "Matrix", "mclust", "mgcv", "nlme", "nnet", "RcppEigen", "rpart", "spatial", "stringi", "survival", "XML"))
install.packages('shiny')
library(shiny)
devtools::install_github("rstudio/shiny")
remove.packages("shiny")
library(shiny)
install.packages('shiny')
library(shiny)
remove.packages("shiny")
install.packages('shiny')
library(shiny)
library(shiny)
devtools::install_github('TICR','nstenz')
devtools::install_github('nstenz/TICR')
library(edgeR)
source("http://bioconductor.org/biocLite.R")
biocLite('edgeR')
library(edgeR)
?exactTest
?topTags
?calcNormFactors
?"DGEList"
algae <- read.table('http://www.liaad.up.pt/~ltorgo/DataMiningWithR/DataSets/Analysis.txt',
header=F,
dec='.',
col.names=c('season','size','speed','mxPH','mnO2','Cl','NO3','NH4','oPO4','PO4','Chla','a1','a2','a3','a4','a5','a6','a7'),
na.strings=c('XXXXXXX'))
plot(algae$speed)
algae <- read.table('http://www.liaad.up.pt/~ltorgo/DataMiningWithR/DataSets/Analysis.txt',
header=F,
dec='.',
col.names=c('season','size','speed','mxPH','mnO2','Cl','NO3','NH4','oPO4','PO4','Chla','a1','a2','a3','a4','a5','a6','a7'),
na.strings=c('XXXXXXX'))
plot(algae$speed)
algae$speed <- factor(algae$speed, levels=c("low", "medium", "high"))
plot(algae$speed)
algae <- read.table('http://www.liaad.up.pt/~ltorgo/DataMiningWithR/DataSets/Analysis.txt',
header=F,
dec='.',
col.names=c('season','size','speed','mxPH','mnO2','Cl','NO3','NH4','oPO4','PO4','Chla','a1','a2','a3','a4','a5','a6','a7'),
na.strings=c('XXXXXXX'))
plot(algae$speed)
algae$speed <- factor(algae$speed, levels=c("high", "medium", "low"))
plot(algae$speed)
table(algae$speed)
0.43925E-01
0.68059E-02
s = 0.15
p = 1/8000
Ne = 4000
e()
exp()
exp(1)
(1-exp(-4*s*p*Ne))
(1-exp(-4*s*p*Ne))/(1-exp(-4*s*Ne))
(1-exp(-4*s*Ne))
exp(-4*s*Ne)
-4*s*Ne
libary(aper)
libary(ape)
library(ape)
my.tree = read.tree("/Users/mjohnson/Desktop/Projects/mosstrap/clustree/species_tree/cds_supermatrix/species_tree_astral_jackknife_cds.tre")
my.tree = read.nexus("/Users/mjohnson/Desktop/Projects/mosstrap/clustree/species_tree/cds_supermatrix/species_tree_astral_jackknife_cds.tre")
plot(my.tree)
plot(reroot(my.tree,"Physco"))
plot(root(my.tree,"Physco"))
plot(root(my.tree,"Physco",resolve=T))
write.tree(root(my.tree,"Physco",resolve=T))
write.tree(root(my.tree,"Physco",resolve=T),file="astral_tree_reroot.tre")
arto = read.table("/Users/mjohnson/Desktop/Projects/HybSeqPipeline/artocarpus/artocarpus_enrichment.txt",sep="\t")
arto = read.table("/Users/mjohnson/Desktop/Projects/HybSeqPipeline/artocarpus/artocarpus_enrichment.txt",sep="\t",header=T)
plot(arto$Paired.surviving,arto$X)
arto = read.table("/Users/mjohnson/Desktop/Projects/HybSeqPipeline/artocarpus/artocarpus_enrichment.txt",sep="\t",header=T)
plot(arto$Paired.surviving,arto$X)
View(arto)
arto = read.table("/Users/mjohnson/Desktop/Projects/HybSeqPipeline/artocarpus/artocarpus_enrichment.txt",sep="\t",header=T)
plot(arto$Pct.Genes,arto$Enrich.Pct)
arto = read.table("/Users/mjohnson/Desktop/Projects/HybSeqPipeline/artocarpus/artocarpus_enrichment.txt",sep="\t",header=T)
plot(arto$Pct.Genes,arto$Enrich.Pct)
library('shiny')
runExample('09_upload')
shiny::runApp('Desktop/R_Scripts/firstShiny')
shiny::runApp('Desktop/R_Scripts/firstShiny')
setwd("~/Desktop/R_Scripts/firstShiny")
install.packages("mapproj")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
setwd("~/Desktop/R_Scripts/structureplot_shiny")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
input
input = list()
input$k1_col = "gray80"
input$k2_col = "gray50"
input$k3_col = "red"
input[["k1_col"]]
input$k = 3
lapply(1:input$k,function(i) input[[paste0("k",i,"_col")]])
unlist(lapply(1:input$k,function(i) input[[paste0("k",i,"_col")]]))
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
strsplit('12345')
strsplit('12345','')
unlist(strsplit('12345',''))
shiny::runApp()
shiny::runApp()
shiny::runApp()
df = read.table("data/nomissing.clumpp.out")
structure_plot(df)
structure_plot(df,2,c("gray50","gray80"),seq(9))
mydata = df[order(df$V4),]
View(mydata)
View(mydata)
View(df)
View(df)
shiny::runApp()
shiny::runApp()
shiny::runApp()
df = read.table('data/miyabeanum_k7.outfile')
structure_plot(df,7,list('gray80','gray50','red','green','blue','orange','pink'),seq(3))
warnings()
structure_plot(df,7,c('gray80','gray50','red','green','blue','orange','pink'),seq(3))
shiny::runApp()
shiny::runApp()
shiny::runApp()
install.packages('devtools')
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='mossmatters',
token='62CFE87AD470F414A905BE456BFC2F33',
secret='/4pPnVRGDMm9hfH7iwBbnwsZ5Rc0HlnF4C1KQU+T')
shiny::runApp()
